// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }
          # 自定义参数
          textureSize: {
              value: [100,100],
              editor: {
                tooltip: "纹理大小（宽和高）"
              } 
          }
          outlineColor: {
             value: [1,1,1,1],
             editor: {
                type: color,
                tooltip: "描边颜色" 
             }
          }
          outlineSize: {
               value: 0.5,
               editor: {
                 range: [1,10],
                 tooltip: "描边宽度，以像素为单位"
               }
          }
          isShow: {
              value: 0.5,
              tooltip: "是否显示轮廓"
          }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if SHOW_OUTLINE

  uniform properties {

      vec4 outlineColor;// 描边颜色

      vec2 textureSize; // 纹理大小（宽和高）

      float outlineSize;// 描边宽度，以像素为单位
 
      int isShow; //是否显示轮廓
  };

  // const float cosArray[12] = { 1, 0.866, 0.5, 0, -0.5, -0.866, -1, -0.866, -0.5, 0, 0.5, 0.866 };
  // const float sinArray[12] = { 0, 0.5, 0.866, 1, 0.866, 0.5, 0, -0.5, -0.866, -1, -0.866, -0.5 };
 
  // int getIsStrokeWithAngelIndex(int index) {
  //     int stroke = 0;
  //     float a = texture2D(texture, vec2(v_uv0.x + outlineSize * cosArray[index] / textureSize.x, v_uv0.y + outlineSize * sinArray[index] / textureSize.y)).a;
  //     if (a >= 0.5)
  //     {
  //       stroke = 1;
  //     }
    
  //  	return stroke;
  // }


    // 判断在这个角度上距离为outlineSize那一点是不是透明
    int getIsStrokeWithAngel(float angel)
    {
      int stroke = 0;
      float rad = angel * 0.01745329252; // 这个浮点数是 pi / 180，角度转弧度
      float a = texture2D(texture, vec2(v_uv0.x + outlineSize * cos(rad) / textureSize.x, v_uv0.y + outlineSize * sin(rad) / textureSize.y)).a; // 这句比较难懂，outlineSize * cos(rad)可以理解为在x轴上投影，除以textureSize.x是因为texture2D接收的是一个0~1的纹理坐标，而不是像素坐标
      if (a >= 0.5)// 我把alpha值大于0.5都视为不透明，小于0.5都视为透明
      {
        stroke = 1;
      }
      return stroke;
    }
   
    #endif


  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;
 
    ALPHA_TEST(o); 

    gl_FragColor = o;
    
    if(isShow == 0){
        return;  
    }

    #if SHOW_OUTLINE
   
    if (o.a >= 0.5)
      {
          o *= v_color;

          ALPHA_TEST(o);

          gl_FragColor = o;
        return;
    }

    int strokeCount = 0;
    strokeCount += getIsStrokeWithAngel(0.0);
    strokeCount += getIsStrokeWithAngel(30.0);
    strokeCount += getIsStrokeWithAngel(60.0);
    strokeCount += getIsStrokeWithAngel(90.0);
    strokeCount += getIsStrokeWithAngel(120.0);
    strokeCount += getIsStrokeWithAngel(150.0);
    strokeCount += getIsStrokeWithAngel(180.0);
    strokeCount += getIsStrokeWithAngel(210.0);
    strokeCount += getIsStrokeWithAngel(240.0);
    strokeCount += getIsStrokeWithAngel(270.0);
    strokeCount += getIsStrokeWithAngel(300.0);
    strokeCount += getIsStrokeWithAngel(330.0);

  
    bool stroke = false;
    if (strokeCount > 0)
    {
      stroke = true;
    }
  
    if (stroke)
    { 
      o.rgba = outlineColor;
      o.a = 1.0;
    }
  
    gl_FragColor = v_color * o;

    #endif
    // #if USE_TEXTURE
    //   CCTexture(texture, v_uv0, o);
    // #endif

    // o *= v_color;

    // ALPHA_TEST(o);

    // gl_FragColor = o;
  }
}%
