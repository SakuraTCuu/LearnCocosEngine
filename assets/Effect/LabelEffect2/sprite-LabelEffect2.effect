CCEffect %{
    techniques:
    - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }
  }%
  
  
  CCProgram vs %{
    precision highp float;
  
    #include <cc-global>
    #include <cc-local>
  
    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
    #endif
  
    void main () {
      vec4 pos = vec4(a_position, 1);
  
      #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
      #else
      pos = cc_matViewProj * pos;
      #endif
  
      #if USE_TEXTURE
      v_uv0 = a_uv0;
      #endif
  
      v_color = a_color;
  
      gl_Position = pos;
    }
  }%
  
  
  CCProgram fs %{
    precision highp float;
    
    #include <alpha-test>
    #include <texture>
  
    in vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    #endif
  
    void main () {
      vec4 o = vec4(1, 1, 1, 1);

      //y 根据x 不断的增大
      vec2 newUv = v_uv0;
      if(v_uv0.y <= 0.5)
      {
        //  discard;
        //离顶部的高度  b = a * Math.tan(angle);
        float ny = (1. - newUv.x) * 0.54; // 45度
        // 计算原来的离顶部高度
        float oy = v_uv0.y;
        float curY =  (0.5 - oy) / 0.5 * (0.5 - ny);
        newUv = vec2(v_uv0.x,  0.5 - curY);
      }
      else
      {
        discard;
       //离的高度  b = a * Math.tan(angle);
        float ny = newUv.x * 0.54; // 45度
        // 计算原来的离顶部高度
        float oy = v_uv0.y - 0.5;
        float curY =  oy / 0.5 * (0.5 - ny);
        newUv = vec2(v_uv0.x,  0.5 + curY);
      }
     
      #if USE_TEXTURE
        CCTexture(texture, newUv, o);
      #endif
  
      o *= v_color;
  
      gl_FragColor = o;
    }
  }%
  