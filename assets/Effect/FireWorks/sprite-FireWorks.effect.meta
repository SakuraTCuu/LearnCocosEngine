{
  "ver": "1.0.25",
  "uuid": "cdf8bfdf-f1e7-477d-abb2-279e135a7aff",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n varying vec4 v_color;\n #if USE_TEXTURE\n varying vec2 v_uv0;\n uniform sampler2D texture;\n #endif\n vec4 getColor(vec2 uv) {\n   vec4 o = vec4(1);\n   #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n   #endif\n   return o;\n}\n void main () {\n vec2 wh = vec2(195, 270);\n vec4 o = getColor(v_uv0) * 0.2270270270;\n vec2 offset = 1.3846153846 / wh;\n vec4 c1 = getColor(v_uv0 + vec2(offset.x, 0.0));\n c1 +=  getColor(v_uv0 - vec2(offset.x, 0.0));\n c1 +=  getColor(v_uv0 + vec2(0.0 + offset.y));\n c1 +=  getColor(v_uv0 - vec2(0.0 + offset.y));\n c1 *=  0.1581081081;\n o += c1;\n offset = 3.2307692308 / wh;\n vec4 c2 = getColor(v_uv0 + vec2(offset.x, 0.0));\n c2 +=  getColor(v_uv0 - vec2(offset.x, 0.0));\n c2 +=  getColor(v_uv0 + vec2(0.0 + offset.y));\n c2 +=  getColor(v_uv0 - vec2(0.0 + offset.y));\n c2 *=  0.03513513515;\n o += c2;\n o *= v_color;\n ALPHA_TEST(o);\n #if USE_BGRA\n   gl_FragColor = o.bgra;\n #else\n   gl_FragColor = o.rgba;\n #endif\n }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n in vec4 v_color;\n #if USE_TEXTURE\n in vec2 v_uv0;\n uniform sampler2D texture;\n #endif\n vec4 getColor(vec2 uv) {\n   vec4 o = vec4(1);\n   #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n   #endif\n   return o;\n}\n void main () {\n vec2 wh = vec2(195, 270);\n vec4 o = getColor(v_uv0) * 0.2270270270;\n vec2 offset = 1.3846153846 / wh;\n vec4 c1 = getColor(v_uv0 + vec2(offset.x, 0.0));\n c1 +=  getColor(v_uv0 - vec2(offset.x, 0.0));\n c1 +=  getColor(v_uv0 + vec2(0.0 + offset.y));\n c1 +=  getColor(v_uv0 - vec2(0.0 + offset.y));\n c1 *=  0.1581081081;\n o += c1;\n offset = 3.2307692308 / wh;\n vec4 c2 = getColor(v_uv0 + vec2(offset.x, 0.0));\n c2 +=  getColor(v_uv0 - vec2(offset.x, 0.0));\n c2 +=  getColor(v_uv0 + vec2(0.0 + offset.y));\n c2 +=  getColor(v_uv0 - vec2(0.0 + offset.y));\n c2 *=  0.03513513515;\n o += c2;\n o *= v_color;\n ALPHA_TEST(o);\n #if USE_BGRA\n   gl_FragColor = o.bgra;\n #else\n   gl_FragColor = o.rgba;\n #endif\n }"
      }
    }
  ],
  "subMetas": {}
}