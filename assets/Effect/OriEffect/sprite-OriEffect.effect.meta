{
  "ver": "1.0.25",
  "uuid": "d8856b69-5994-4558-90d5-8f265723c159",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nuniform sampler2D texture;\nprecision mediump float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec2 v_uv0;\nuniform sampler2D u_normalMap;\nvarying vec4 v_color;\nvec3 waveNormal(vec2 p) {\n    float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);\n    float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);\n    vec3 normal = texture2D(u_normalMap, vec2(x , y)).xyz;\n    normal = -1.0 + normal * 2.0;\n    normal.x *= 0.1;\n    normal.y *= 0.1;\n    return normalize(normal);\n}\nvoid main() {\n  float timeFactor = 0.1;\n  float offsetFactor = 0.5;\n  float refractionFactor = 0.7;\n  vec3 normal = waveNormal(v_uv0 + vec2(cc_time.x * 1.0 * timeFactor, cc_time.x * 0.1 * timeFactor));\n  vec2 p = -1.0 + 2.0 * v_uv0;\n  vec3 eyePos = vec3(0, 0, 10);\n  vec3 inVec = normalize(vec3(p, 0) - eyePos);\n  vec3 refractVec = refract(inVec, normal, refractionFactor);\n  vec2 v_texCoordN = v_uv0;\n  v_texCoordN += refractVec.xy * offsetFactor;\n  gl_FragColor = texture2D(texture, v_texCoordN);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nuniform sampler2D texture;\nprecision mediump float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec2 v_uv0;\nuniform sampler2D u_normalMap;\nin vec4 v_color;\nvec3 waveNormal(vec2 p) {\n    float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);\n    float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);\n    vec3 normal = texture2D(u_normalMap, vec2(x , y)).xyz;\n    normal = -1.0 + normal * 2.0;\n    normal.x *= 0.1;\n    normal.y *= 0.1;\n    return normalize(normal);\n}\nvoid main() {\n  float timeFactor = 0.1;\n  float offsetFactor = 0.5;\n  float refractionFactor = 0.7;\n  vec3 normal = waveNormal(v_uv0 + vec2(cc_time.x * 1.0 * timeFactor, cc_time.x * 0.1 * timeFactor));\n  vec2 p = -1.0 + 2.0 * v_uv0;\n  vec3 eyePos = vec3(0, 0, 10);\n  vec3 inVec = normalize(vec3(p, 0) - eyePos);\n  vec3 refractVec = refract(inVec, normal, refractionFactor);\n  vec2 v_texCoordN = v_uv0;\n  v_texCoordN += refractVec.xy * offsetFactor;\n  gl_FragColor = texture2D(texture, v_texCoordN);\n}"
      }
    }
  ],
  "subMetas": {}
}