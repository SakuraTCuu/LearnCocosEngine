CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
    
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties: 
        texture: { value: white }
        u_normalMap: { value: white }
        alphaThreshold: { value: 0.5 } 
}% 

CCProgram vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>
  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  
  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE 
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  uniform sampler2D texture;  
  precision mediump float;
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec2 v_uv0;
  uniform sampler2D u_normalMap; //法线贴图
  in vec4 v_color;

  vec3 waveNormal(vec2 p) {    
      float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);
      float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);
      vec3 normal = texture2D(u_normalMap, vec2(x , y)).xyz;  
      normal = -1.0 + normal * 2.0;  
      normal.x *= 0.1;
      normal.y *= 0.1;
      return normalize(normal);  
  }  

  void main() {  
    float timeFactor = 0.1;  
    float offsetFactor = 0.5;  
    float refractionFactor = 0.7;  

    vec3 normal = waveNormal(v_uv0 + vec2(cc_time.x * 1.0 * timeFactor, cc_time.x * 0.1 * timeFactor));  

    vec2 p = -1.0 + 2.0 * v_uv0;
    vec3 eyePos = vec3(0, 0, 10);
    vec3 inVec = normalize(vec3(p, 0) - eyePos);  
    vec3 refractVec = refract(inVec, normal, refractionFactor);
    vec2 v_texCoordN = v_uv0;
    v_texCoordN += refractVec.xy * offsetFactor; 
    
    gl_FragColor = texture2D(texture, v_texCoordN);
  } 
}%