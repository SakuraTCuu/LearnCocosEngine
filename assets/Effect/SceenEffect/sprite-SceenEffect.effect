CCEffect %{
    techniques:
    - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          waveTexture: { value: white }
          alphaThreshold: { value: 0.5 }
          magnitude: { value: 10 }

  }%
  
  
  CCProgram vs %{
    precision highp float;
  
    #include <cc-global>
    #include <cc-local>
  
    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
    #endif
  
    void main () {
      vec4 pos = vec4(a_position, 1);
  
      #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
      #else
      pos = cc_matViewProj * pos;
      #endif
  
      #if USE_TEXTURE
      v_uv0 = a_uv0;
      #endif
  
      v_color = a_color;
  
      gl_Position = pos;
    }
  }%
  
  
  CCProgram fs %{
    precision highp float;
    
    #include <alpha-test>
    #include <texture>
    #include <cc-global>
  
    in vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    uniform sampler2D waveTexture;
    uniform properties {
      float magnitude;
    };
    #endif
  
    void main () {
      // vec4 o = vec4(1, 1, 1, 1);
 
      //CCTexture(texture, v_uv0, o);

      vec2 distuv = vec2(v_uv0.x + cc_time.x * 2. / 20., v_uv0.y + cc_time.x * 2. / 20.);
     //截断
      distuv = fract(distuv);

      vec2 disp = texture(waveTexture, distuv).xy;

      disp = ((disp * 2.) - 1.) * magnitude;
   
      vec2 final = v_uv0 + disp;
      vec4 color = texture(texture, final); 

      color *= v_color;
  
      gl_FragColor = color;
    }
  }%
  