CCEffect %{
    techniques:
    - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }
  }%
  
  
  CCProgram vs %{
    precision highp float;
  
    #include <cc-global>
    #include <cc-local>
  
    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
    #endif
  
    void main () {
      vec4 pos = vec4(a_position, 1);
  
      #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
      #else
      pos = cc_matViewProj * pos;
      #endif
  
      #if USE_TEXTURE
      v_uv0 = a_uv0;
      #endif
  
      v_color = a_color;
  
      gl_Position = pos;
    }
  }%
  
  
  CCProgram fs %{
    precision highp float;
    
    #include <alpha-test>
    #include <texture>
    
    #include <cc-global>
    // #include <cc-global>

  
    in vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    #endif

    float rand(vec2 co){
      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
    }

    //新的伪随机函数，接受一个vec2，产生一个0到1的数
    float random (vec2 st) {
        return fract(sin(dot(st.xy, vec2(565656.233,123123.2033))) * 323434.34344);
    }

    //升级版伪随机，接受一个vec2，产生x和y都是0到1的vec2
    vec2 random2( vec2 p ) {
        return fract(sin(vec2(dot(p,vec2(234234.1,54544.7)), sin(dot(p,vec2(33332.5,18563.3))))) *323434.34344);
    }

    vec4 sky(vec2 fragCoord){
        float size = 30.0;
        float prob = 0.95;
        
        vec2 pos = floor(1.0 / size * fragCoord.xy);
        
        float color = 0.0;
        float starValue = rand(pos);
        if (starValue > prob)
        {
          vec2 center = size * pos + vec2(size, size) * 0.5;
          
          float t = 0.9 + 0.2 * sin(cc_time.x + (starValue - prob) / (1.0 - prob) * 45.0);
              
          color = 1.0 - distance(fragCoord.xy, center) / (0.5 * size);
          color = color * t / (abs(fragCoord.y - center.y)) * t / (abs(fragCoord.x - center.x));
        }
        else if (rand(fragCoord.xy / cc_screenSize.xy) > 0.996)
        {
          float r = rand(fragCoord.xy);
          color = r * (0.25 * sin(cc_time.x * (r * 5.0) + 720.0 * r) + 0.75);
        } 
    
       return vec4(vec3(color), 1.0);
    }

    vec4 sky2(){
        //生成屏幕UV (from 0 to 1)
        vec2 uv =  v_uv0;
        uv *= 10.0;//横向纵向都扩大10倍
        vec2 ipos = floor(uv);  // 整数部分组成二维数组：网格的坐标
        vec2 fpos = fract(uv);  // 小数部分组成二维数组：网格内的UV  
        // vec3 color = vec3(random2(ipos));//同一个格子坐标，产生同一个颜色
        // 通过坐标，生成星星的uv坐标
        vec2 targetPoint = random2(ipos);    
        float dist = length(fpos - targetPoint);//当前uv坐标到星星uv坐标的距离
        vec3 color = vec3(1. - step(0.013, dist));//距离大于0.013就显示成黑色

        //TODO: 调整效果
        float ratio = mod(cc_time.x, 3.);
        ratio = 0.5 + smoothstep(0., 3., ratio);
        color *= ratio;
              
        return vec4(color, 1.0);
    }
  
    void main () {
      vec4 o = vec4(1, 1, 1, 1);
  
      #if USE_TEXTURE
        CCTexture(texture, v_uv0, o);
      #endif

      vec2 sceenSize = vec2(800, 450);

      // vec2 fragCoord = sceenSize.xy * v_uv0.xy;
      // vec4 col = sky(fragCoord);
      vec4 col = sky2();
      gl_FragColor = col;
    }
  }%
  