CCEffect %{
    techniques:
    - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }
  }%
  
  
  CCProgram vs %{
    precision highp float;
  
    #include <cc-global>
    #include <cc-local>
  
    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
    #endif
  
    void main () {
      vec4 pos = vec4(a_position, 1);
  
      #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
      #else
      pos = cc_matViewProj * pos;
      #endif
  
      #if USE_TEXTURE
      v_uv0 = a_uv0;
      #endif
  
      v_color = a_color;
  
      gl_Position = pos;
    }
  }%
  
  
  CCProgram fs %{
    precision highp float;
    
    #include <alpha-test>
    #include <texture>
  
    in vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    #endif

    //参考链接:  https://zhuanlan.zhihu.com/p/58182228

    //  基于线性采样的高效高斯模糊实现
  
    void main () { 
        
         #if SHOW_EFFECT
          float h = 200.0;
        
          vec4 col = texture2D(texture, v_uv0) * 0.2270270270;

          col += texture2D(texture, (v_uv0 + vec2(0.0, 1.3846153846 / h))) * 0.3162162162;
          col += texture2D(texture, (v_uv0 - vec2(0.0, 1.3846153846 / h))) * 0.3162162162;

          col += texture2D(texture, (v_uv0 + vec2(0.0, 3.2307692308 / h))) * 0.0702702703;
          col += texture2D(texture, (v_uv0 - vec2(0.0, 3.2307692308 / h))) * 0.0702702703;

          gl_FragColor = col;
          return;
         #endif
        
        gl_FragColor = texture2D(texture, v_uv0) * v_color;
    }
  }%
  