{
  "ver": "1.0.25",
  "uuid": "a3f03701-475b-4337-aa9f-23852bf4eaca",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 outLineColor;\n#endif\nvec4 InLight()\n{\n  vec2 uv = v_uv0;\n  vec4 oriCol = texture2D(texture, uv);\n  float dis = distance(vec2(0.5,0.5),uv);\n  float a = dis / 0.7  * 0.8;\n  float alpha = smoothstep(0.2, 0.9, a);\n  vec4 color = vec4(outLineColor.rgb, alpha);\n  return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if SHOW_OUTLINE\n    float fw = 0.03;\n    float sLeft = texture2D(texture, v_uv0 + vec2(fw,0)).a;\n    float sRight = texture2D(texture, v_uv0 - vec2(fw,0)).a;\n    float sBottom = texture2D(texture, v_uv0 - vec2(0,fw)).a;\n    float sTop = texture2D(texture, v_uv0 + vec2(0,fw)).a;\n    float result = sLeft + sRight + sTop + sBottom;\n    result *= (1.0 - o.a);\n    o = result * outLineColor;\n  #endif\n  #if SHOW_INLIGHT\n    o = InLight();\n  #endif\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform properties {\n  vec4 outLineColor;\n};\n#endif\nvec4 InLight()\n{\n  vec2 uv = v_uv0;\n  vec4 oriCol = texture2D(texture, uv);\n  float dis = distance(vec2(0.5,0.5),uv);\n  float a = dis / 0.7  * 0.8;\n  float alpha = smoothstep(0.2, 0.9, a);\n  vec4 color = vec4(outLineColor.rgb, alpha);\n  return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if SHOW_OUTLINE\n    float fw = 0.03;\n    float sLeft = texture2D(texture, v_uv0 + vec2(fw,0)).a;\n    float sRight = texture2D(texture, v_uv0 - vec2(fw,0)).a;\n    float sBottom = texture2D(texture, v_uv0 - vec2(0,fw)).a;\n    float sTop = texture2D(texture, v_uv0 + vec2(0,fw)).a;\n    float result = sLeft + sRight + sTop + sBottom;\n    result *= (1.0 - o.a);\n    o = result * outLineColor;\n  #endif\n  #if SHOW_INLIGHT\n    o = InLight();\n  #endif\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}