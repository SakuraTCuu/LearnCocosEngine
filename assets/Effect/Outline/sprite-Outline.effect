CCEffect %{
    techniques:
    - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          outLineColor: { value: [1,1,1,1]}
          alphaThreshold: { value: 0.5 }
  }%
  
  
  CCProgram vs %{
    precision highp float;
  
    #include <cc-global>
    #include <cc-local>
  
    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
    #endif
  
    void main () {
      vec4 pos = vec4(a_position, 1);
  
      #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
      #else
      pos = cc_matViewProj * pos;
      #endif
  
      #if USE_TEXTURE
      v_uv0 = a_uv0;
      #endif
  
      v_color = a_color;
  
      gl_Position = pos;
    }
  }%
  
  
  CCProgram fs %{
    precision highp float;
    
    #include <alpha-test>
    #include <texture>
  
    in vec4 v_color;
  
    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    uniform properties {
      vec4 outLineColor;
    };
    #endif


    vec4 InLight()
    {
      vec2 uv = v_uv0; 
      vec4 oriCol = texture2D(texture, uv);

      float dis = distance(vec2(0.5,0.5),uv);
      float a = dis / 0.7  * 0.8; 
      float alpha = smoothstep(0.2, 0.9, a);
      vec4 color = vec4(outLineColor.rgb, alpha);
      // if(oriCol.a < 0.1){
      //   return vec4(1, 1, 1, 0);
      // }
      return color;
    }
  
    void main () {
      vec4 o = vec4(1, 1, 1, 1);
  
      #if USE_TEXTURE
        CCTexture(texture, v_uv0, o);
      #endif

      // o *= v_color;

      #if SHOW_OUTLINE
        float fw = 0.01;
          // 先四周多次采样
        float sLeft = texture2D(texture, v_uv0 + vec2(fw,0)).a;
        float sRight = texture2D(texture, v_uv0 - vec2(fw,0)).a;
        float sBottom = texture2D(texture, v_uv0 - vec2(0,fw)).a;
        float sTop = texture2D(texture, v_uv0 + vec2(0,fw)).a;
      
        float result = sLeft + sRight + sTop + sBottom;
        result *= (1.0 - o.a); //周围透明度越低,则边缘展示的越明显
        o = result * outLineColor;
      #endif

      #if SHOW_INLIGHT 
        o = InLight();
      #endif
  
      gl_FragColor = o;
    }
  }%
  