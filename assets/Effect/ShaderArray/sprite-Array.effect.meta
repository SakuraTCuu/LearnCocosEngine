{
  "ver": "1.0.25",
  "uuid": "7dc779a0-ac26-4e42-83be-c2c70fb55c39",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D newTex;\nuniform vec4 posArr[1000];\nuniform vec2 size;\nuniform int count;\n#endif\nvec4 getContainsTexCol(vec4 o){\n  float w = size.x;\n  float h = size.y;\n  for (int i = 0; i < 1000; i++)\n  {\n    if (i >= count){ break; }\n    if (   posArr[i].x   <  v_uv0.x &&\n       (posArr[i].x + w) >  v_uv0.x &&\n        posArr[i].y      <  v_uv0.y &&\n       (posArr[i].y + h) >  v_uv0.y)\n    {\n        float newU = (v_uv0.x - posArr[i].x) / w;\n        float newV = (v_uv0.y - posArr[i].y) / h;\n  vec4 newTex_tmp = texture2D(newTex, vec2(newU, newV));\n  #if CC_USE_ALPHA_ATLAS_newTex\n      newTex_tmp.a *= texture2D(newTex, vec2(newU, newV) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (newTex_tmp.rgb * newTex_tmp.rgb);\n    o.a *= newTex_tmp.a;\n  #else\n    o *= newTex_tmp;\n  #endif\n        return o;\n    }\n  }\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  return o;\n}\nvec4 getContainsCol(vec4 o){\n  float w = size.x;\n  float h = size.y;\n  for (int i = 0; i < 1000; i++)\n  {\n    if (i >= count){ break; }\n    if (   posArr[i].x   <  v_uv0.x &&\n       (posArr[i].x + w) >  v_uv0.x &&\n        posArr[i].y      <  v_uv0.y &&\n       (posArr[i].y + h) >  v_uv0.y)\n    {\n      return vec4(1, 1, 1, 0);\n    }\n  }\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  return o;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= v_color;\n  #if SHOW_HOLLOW\n      #if SHOW_TEXTURE\n          o = getContainsTexCol(o);\n      #else\n          o = getContainsCol(o);\n      #endif\n  #endif\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D newTex;\nuniform properties {\n  vec4 posArr[1000];\n  vec2 size;\n  int count;\n};\n#endif\nvec4 getContainsTexCol(vec4 o){\n  float w = size.x;\n  float h = size.y;\n  for (int i = 0; i < 1000; i++)\n  {\n    if (i >= count){ break; }\n    if (   posArr[i].x   <  v_uv0.x &&\n       (posArr[i].x + w) >  v_uv0.x &&\n        posArr[i].y      <  v_uv0.y &&\n       (posArr[i].y + h) >  v_uv0.y)\n    {\n        float newU = (v_uv0.x - posArr[i].x) / w;\n        float newV = (v_uv0.y - posArr[i].y) / h;\n  vec4 newTex_tmp = texture(newTex, vec2(newU, newV));\n  #if CC_USE_ALPHA_ATLAS_newTex\n      newTex_tmp.a *= texture(newTex, vec2(newU, newV) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (newTex_tmp.rgb * newTex_tmp.rgb);\n    o.a *= newTex_tmp.a;\n  #else\n    o *= newTex_tmp;\n  #endif\n        return o;\n    }\n  }\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  return o;\n}\nvec4 getContainsCol(vec4 o){\n  float w = size.x;\n  float h = size.y;\n  for (int i = 0; i < 1000; i++)\n  {\n    if (i >= count){ break; }\n    if (   posArr[i].x   <  v_uv0.x &&\n       (posArr[i].x + w) >  v_uv0.x &&\n        posArr[i].y      <  v_uv0.y &&\n       (posArr[i].y + h) >  v_uv0.y)\n    {\n      return vec4(1, 1, 1, 0);\n    }\n  }\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  return o;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= v_color;\n  #if SHOW_HOLLOW\n      #if SHOW_TEXTURE\n          o = getContainsTexCol(o);\n      #else\n          o = getContainsCol(o);\n      #endif\n  #endif\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}